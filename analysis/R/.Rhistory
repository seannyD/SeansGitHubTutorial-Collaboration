d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(2,3))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz~dx$physpos)
}
signedup = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/SignedUp.txt",sep='\t',stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep=\t,stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep="\t",stringsAsFactors=F)
signedup = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/SignedUp.txt",sep='\t',stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep="\t",stringsAsFactors=F)
signedup
auth[! auth%in% signedup]
sum(auth%in% signedup)
sum(auth%in% signedup[,1])
sum(auth[,1]%in% signedup[,1])
sum(auth[,1] %in% signedup[,1])
auth[,1]
sum(auth[,2]%in% signedup[,1])
auth[! auth[,2]%in% signedup[,1]]
auth[! auth[,2]%in% signedup[,1],2]
x = rbind(signedup[,1],auth[! auth[,2]%in% signedup[,1],2])
signedup[,1]
auth[! auth[,2]%in% signedup[,1],2]
x = c(signedup[,1],auth[! auth[,2]%in% signedup[,1],2])
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt")
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt",row.names=F)
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt",row.names=F, quote=F)
for(p in c("knitr","rmarkdown","lme4","ggplot2","usdm","party","plyr","ade4","ecodist","vegan","lattice","cwhmisc","ape","adegenet","pegas","MASS","caper","geiger","nlme","phytools")){install.packages(p)}
install.packages("arm")
install.packages("rethinking")
install.packages("rethinking")
install.packages(c('devtools','coda','mvtnorm'))
library(devtools)
install_github("rmcelreath/rethinking")
library(cwhmisc)
library(lme4)
?lmer()
?lmerControl
w = 152.4
h = 228.6
l = 0
t = 0
bp2mm = 2.83467
w*bp2mm
h*bp2mm
l *bp2mm
t *bp2mm
paste( "'", w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "'",
sep = '')
w = 152.4
h = 228.6
l = 40
t = 50
bp2mm = 2.83467
paste( "pdfcrop --margin '", w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margin '",
w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --bbox '",
w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
bp2mm = 2.83467
paste( "pdfcrop --margins '",
l*bp2mm, " ",
t*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l *bp2mm, " ",
-t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
l
t
-l*bp2mm
595 * (1/2.83467)
l
w0 - (2*l)
paste( "pdfcrop --bbox '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l *bp2mm, " ",
-t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
l*bp2mm
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '0 0 0 0' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '",
0,0,w0*bp2mm,h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l*bp2mm, " ",
-t*bp2mm, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.35
h = 228.55
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l*bp2mm, " ",
-t*bp2mm, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
library(ape)
rtree(10)
t = rtree(10)
d = matrix(rnorm(100),nrow=10)
t
plot(t)
d
d[upper.tri(d)] = d[lower.tri(d)]
diag(d) = 0
library(ecodist)
??patristic
vcov(t)
?vcov
try(setwd("~/Documents/Teaching/IntroToGitHub/TutorialFolders/collaborationTutorial/analysis/R/"))
files = list.files("../../data/rawData/", pattern="*.txt")
dx = read.delim(f)
f = files[1]
dx = read.delim(f)
rawDataFolder = "../../data/rawData/"
dx = read.delim(paste(rawDataFolder,f,sep='')
dx = read.delim(paste(rawDataFolder,f,sep=''))
dx
dx = read.delim(paste(rawDataFolder,f,sep=''), header=F)
d
dx
dx[1,]
dx[,1]
---
title: "Timed listing"
output: html_document
---
# Intro
# Load data
```{r echo=F}
try(setwd("~/Documents/Teaching/IntroToGitHub/TutorialFolders/collaborationTutorial/analysis/R/"))
```
```{r}
rawDataFolder = "../../data/rawData/"
files = list.files(rawDataFolder, pattern="*.txt")
d = data.frame()
for(f in files){
fileBits = strsplit(f,"_")[[1]]
if(length(fileBits)==2){
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
dx = dx[,1]
dx$name = fileBits[1]
dx$bilingual = fileBits[2]=="b" || fileBits[2]=="B"
d = rbind(d,dx)
}
}
```
d
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
dx = dx[,1:1]
dx
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
dx$name = fileBits[1]
dx$bilingual = fileBits[2]=="b" || fileBits[2]=="B"
d = rbind(d,dx)
d = data.frame()
for(f in files){
fileBits = strsplit(f,"_")[[1]]
if(length(fileBits)==2){
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
#dx = dx[,1]
dx$name = fileBits[1]
dx$bilingual = fileBits[2]=="b" || fileBits[2]=="B"
d = rbind(d,dx)
}
}
d
fileBits
fileBits = strsplit(grepl("\\.txt","",f),"_")[[1]]
grepl("\\.txt","",f)
fileBits = strsplit(gsub("\\.txt","",f),"_")[[1]]
fileBits
---
title: "Timed listing"
output: html_document
---
# Intro
# Load data
```{r echo=F}
try(setwd("~/Documents/Teaching/IntroToGitHub/TutorialFolders/collaborationTutorial/analysis/R/"))
```
```{r}
rawDataFolder = "../../data/rawData/"
files = list.files(rawDataFolder, pattern="*.txt")
d = data.frame()
for(f in files){
fileBits = strsplit(gsub("\\.txt","",f),"_")[[1]]
if(length(fileBits)==2){
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
#dx = dx[,1]
dx$name = fileBits[1]
dx$bilingual = fileBits[2]=="b" || fileBits[2]=="B"
d = rbind(d,dx)
}
}
```
d
hist(table(d$name))
table(d$name)
rawDataFolder = "../../data/rawData/animals/"
files = list.files(rawDataFolder, pattern="*.txt")
d = data.frame()
for(f in files){
fileBits = strsplit(gsub("\\.txt","",f),"_")[[1]]
if(length(fileBits)==2){
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
dx = data.frame(responses = dx[,1], stringsAsFactors = F)
dx$name = fileBits[1]
dx$bilingual = fileBits[2]=="b" || fileBits[2]=="B"
d = rbind(d,dx)
}
}
d
rawDataFolder = "../../data/rawData/animals/"
files = list.files(rawDataFolder, pattern="*.txt")
d = data.frame()
for(f in files){
fileBits = strsplit(gsub("\\.txt","",f),"_")[[1]]
if(length(fileBits)==2){
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
dx = data.frame(responses = dx[,1], stringsAsFactors = F)
# make lower case
dx$responses = tolower(dx$responses)
# get rid of duplicate answers
dx = dx[!duplicated(dx$responses),]
# get rid of empty answers
dx = dx[nchar(gsub(" ","",dx$responses))>0
& !is.na(dx$responses),]
# add name and bilingual status
dx$name = fileBits[1]
dx$bilingual = fileBits[2]=="b" || fileBits[2]=="B"
d = rbind(d,dx)
}
}
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
dx = data.frame(responses = dx[,1], stringsAsFactors = F)
dx
tolower(dx$responses)
dx$responses
dx$responses = tolower(dx$responses)
# get rid of duplicate answers
dx = dx[!duplicated(dx$responses),]
# get rid of empty answers
dx = dx[nchar(gsub(" ","",dx$responses))>0
& !is.na(dx$responses),]
dx$responses
dx
dx = data.frame(responses = dx[,1], stringsAsFactors = F)
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
dx = data.frame(responses = dx[,1], stringsAsFactors = F)
dx
dx$responses = tolower(dx$responses)
dx
dx = dx[!duplicated(dx$responses),]
dx
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
dx = data.frame(responses = dx[,1], stringsAsFactors = F)
# make lower case
dx$responses = tolower(dx$responses)
duplicated(dx$responses)
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
dx = data.frame(responses = dx[,1], stringsAsFactors = F)
# add name and bilingual status
dx$name = fileBits[1]
dx$bilingual = fileBits[2]=="b" || fileBits[2]=="B"
dx$responses = tolower(dx$responses)
dx = dx[!duplicated(dx$responses),]
dx = dx[nchar(gsub(" ","",dx$responses))>0
& !is.na(dx$responses),]
dx
hist(table(d$name),
xlab="Number of responses per participant")
table(d$name)
rawDataFolder = "../../data/rawData/animals/"
files = list.files(rawDataFolder, pattern="*.txt")
d = data.frame()
for(f in files){
fileBits = strsplit(gsub("\\.txt","",f),"_")[[1]]
if(length(fileBits)==2){
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
dx = data.frame(responses = dx[,1], stringsAsFactors = F)
# add name and bilingual status
dx$name = fileBits[1]
dx$bilingual = fileBits[2]=="b" || fileBits[2]=="B"
# make lower case
dx$responses = tolower(dx$responses)
# get rid of duplicate answers
dx = dx[!duplicated(dx$responses),]
# get rid of empty answers
dx = dx[nchar(gsub(" ","",dx$responses))>0
& !is.na(dx$responses),]
d = rbind(d,dx)
}
}
hist(table(d$name),
xlab="Number of responses per participant")
animals = rev(sort(table(d$responses)))
animals
barplot(animals)
barplot(animals, horiz = T)
barplot(animals, horiz = T, las=1)
table(d$name)
tapply(d$bilingual,d$name,head,n=1)
?error
??error
means = tapply(numResponses,lingBack,mean)
lingBack = c("Monolingual","Bilingual")[
tapply(d$bilingual,d$name,head,n=1)]
means = tapply(numResponses,lingBack,mean)
numResponses = table(d$name)
means = tapply(numResponses,lingBack,mean)
numResponses
lingBack
lingBack = c("Monolingual","Bilingual")[
tapply(d$bilingual,d$name,head,n=1) + 1]
means = tapply(numResponses,lingBack,mean)
means
lingBack = c("Monolingual","Bilingual")[
tapply(d$bilingual,d$name,head,n=1) + 1]
means = tapply(numResponses,lingBack,mean)
means
---
title: "Timed listing"
output: html_document
---
# Intro
# Load data
```{r echo=F}
try(setwd("~/Documents/Teaching/IntroToGitHub/TutorialFolders/collaborationTutorial/analysis/R/"))
```
```{r}
rawDataFolder = "../../data/rawData/animals/"
files = list.files(rawDataFolder, pattern="*.txt")
d = data.frame()
for(f in files){
fileBits = strsplit(gsub("\\.txt","",f),"_")[[1]]
if(length(fileBits)==2){
dx = read.delim(paste(rawDataFolder,f,sep=''),
header=F,
stringsAsFactors =F)
dx = data.frame(responses = dx[,1], stringsAsFactors = F)
# add name and bilingual status
dx$name = fileBits[1]
dx$bilingual = fileBits[2]=="b" || fileBits[2]=="B"
# make lower case
dx$responses = tolower(dx$responses)
# get rid of duplicate answers
dx = dx[!duplicated(dx$responses),]
# get rid of empty answers
dx = dx[nchar(gsub(" ","",dx$responses))>0
& !is.na(dx$responses),]
d = rbind(d,dx)
}
}
```
## How many responses per participant?
```{r}
numResponses = table(d$name)
hist(table(d$name),
xlab="Number of responses per participant")
```
## Responses by linguistic background
```{r}
lingBack = c("Monolingual","Bilingual")[
tapply(d$bilingual,d$name,head,n=1) + 1]
means = tapply(numResponses,lingBack,mean)
means
?stderr()
sd = tapply(numResponses,lingBack,sd)
sd / tapply(numResponses,lingBack,length)
tapply(numResponses,lingBack,length)
sd
tapply(numResponses,lingBack,sd)
plot(means)
plot(means,
xlim=c(0,3))
plotmeans(numRespones~lingBack)
library(gplots)
plotmeans(numRespones~lingBack)
plotmeans(numResponses~lingBack)
animals = rev(sort(table(d$responses)))
animals = animals[1:20]
barplot(animals,
horiz = T, las=1,
xlab= "Frequency")
animals
animals = rev(sort(table(d$responses)))
if(length(animals)>20){
animals = animals[1:20]
}
barplot(animals,
horiz = T, las=1,
xlab= "Frequency")
animals
animals = rev(sort(table(d$responses)))
if(length(animals)>20){
animals = animals[1:20]
}
barplot(rev(animals),
horiz = T, las=1,
xlab= "Frequency")
write.csv(d,"../../data/processedData/AnimalResponses.csv", row.names = F)
